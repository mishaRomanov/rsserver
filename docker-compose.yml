services:
  server:
    build:
      context: .
    networks:
    - rsserver 
    env_file:
      - .env 
    depends_on:
      - db
    ports:
      - "4040:4040"
  
  db: 
    image: postgres:latest
    container_name: rsserver.db
    restart: unless-stopped
    networks:
      - rsserver
    environment:
      POSTGRES_PASSWORD: pass 
      POSTGRES_USER: backend_user 
      POSTGRES_DB: logs 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend_user -d logs"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - .postgres-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  migrations: 
      image: migrate/migrate:latest
      env_file:
      - .env 
      networks:
      - rsserver
      volumes:
      - ./migrations:/migrations
      depends_on:
        db: 
          condition: service_healthy  
      command: ["-path", "/migrations", "-database",  "$DB_ADDR", "up"]
networks:
  rsserver:
    driver: bridge
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

